library(netmeta)
shiny::runApp('O:/PhD/PhD project/Publication bias/Framework reporting bias/rob-men Shiny/rob-men-redux')
runApp()
runApp('O:/PhD/PhD project/Publication bias/Framework reporting bias/rob-men Shiny/rob-men-redux')
runApp('O:/PhD/PhD project/Publication bias/Framework reporting bias/rob-men Shiny/rob-men-redux')
runApp('O:/PhD/PhD project/Publication bias/Framework reporting bias/rob-men Shiny/rob-men-redux')
shiny::runApp('O:/PhD/PhD project/Publication bias/Framework reporting bias/rob-men Shiny/reporting-bias/reporting-bias/rob-men')
ls()
newdata$varStudies
library(meta)
library(metafor)
library(netmeta)
library(xlsx)
library(readxl)
library(devtools)
install_github("esm-ispm-unibe-ch/NMAJags")
library(NMAJags)
library(R2jags)
library(BUGSnet)
x <- read.csv("aae main_06-14-2022_for robmen_revised.csv")
x <- read.csv("C:/Users/vc18e501/Desktop/aae main_06-14-2022_for robmen_revised.csv")
data <- pairwise(t,r,n,id, data = x)
data <- pairwise(t,event=r,n=n,studlab=id, data = x)
nma <- netmeta(data)
View(x)
netgraph(nma)
shiny::runApp('O:/PhD/PhD project/Publication bias/Framework reporting bias/rob-men Shiny/reporting-bias/reporting-bias/rob-men')
runApp('O:/PhD/PhD project/Publication bias/Framework reporting bias/rob-men Shiny/reporting-bias/reporting-bias/rob-men')
x <- read.csv("C:/Users/vc18e501/Desktop/aae main_06-14-2022_for robmen_revised.csv")
View(x)
x <- read.csv("C:/Users/vc18e501/Desktop/aae main_06-14-2022_for robmen_revised.csv")
x <- read.csv("C:/Users/vc18e501/Desktop/aae main_06-14-2022_for robmen_revised.csv")
x <- read.csv("C:/Users/vc18e501/Desktop/aae main_06-14-2022_for robmen_revised_VC.csv")
View(x)
x <- read.csv2("C:/Users/vc18e501/Desktop/aae main_06-14-2022_for robmen_revised_VC.csv")
x <- read.csv("C:/Users/vc18e501/Desktop/aae main_06-14-2022_for robmen_revised_VC.csv")
x <- read.csv("C:/Users/vc18e501/Desktop/aae main_06-14-2022_for robmen_revised.csv")
runApp('O:/PhD/PhD project/Publication bias/Framework reporting bias/rob-men Shiny/reporting-bias/reporting-bias/rob-men')
x <- read.csv("C:/Users/vc18e501/Desktop/attempt1.csv")
x <- read.csv("C:/Users/vc18e501/Desktop/attempt 1.csv")
install.packages(c("blob", "broom", "checkmate", "cli", "clipr", "cluster", "colorspace", "commonmark", "copula", "crayon", "DBI", "dbplyr", "desc", "dplyr", "DT", "ellipse", "evaluate", "evd", "extrafont", "extras", "fansi", "gert", "ggplot2", "glue", "haven", "httr", "igraph", "knitr", "lavaan", "lme4", "loo", "magic", "magrittr", "MASS", "mathjaxr", "Matrix", "matrixStats", "metafor", "mgcv", "mnormt", "nlme", "nloptr", "OpenMx", "openssl", "pcaPP", "plyr", "posterior", "processx", "ps", "randtoolbox", "rbibutils", "RColorBrewer", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "Rdpack", "readxl", "rjags", "rlang", "rmarkdown", "roxygen2", "rprojroot", "rstan", "rstantools", "sass", "scales", "stargazer", "survival", "term", "testthat", "tibble", "tidygraph", "tidyselect", "tinytex", "tzdb", "usethis", "uuid", "vctrs", "waldo", "withr", "xfun"))
install.packages(c("blob", "broom", "checkmate", "cli", "clipr", "cluster", "colorspace", "commonmark", "copula", "crayon", "DBI", "dbplyr", "desc", "dplyr", "DT", "ellipse", "evaluate", "evd", "extrafont", "extras", "fansi", "gert", "ggplot2", "glue", "haven", "httr", "igraph", "knitr", "lavaan", "lme4", "loo", "magic", "magrittr", "MASS", "mathjaxr", "Matrix", "matrixStats", "metafor", "mgcv", "mnormt", "nlme", "nloptr", "OpenMx", "openssl", "pcaPP", "plyr", "posterior", "processx", "ps", "randtoolbox", "rbibutils", "RColorBrewer", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "Rdpack", "readxl", "rjags", "rlang", "rmarkdown", "roxygen2", "rprojroot", "rstan", "rstantools", "sass", "scales", "stargazer", "survival", "term", "testthat", "tibble", "tidygraph", "tidyselect", "tinytex", "tzdb", "usethis", "uuid", "vctrs", "waldo", "withr", "xfun"))
install.packages(c("blob", "broom", "checkmate", "cli", "clipr", "cluster", "colorspace", "commonmark", "copula", "crayon", "DBI", "dbplyr", "desc", "dplyr", "DT", "ellipse", "evaluate", "evd", "extrafont", "extras", "fansi", "gert", "ggplot2", "glue", "haven", "httr", "igraph", "knitr", "lavaan", "lme4", "loo", "magic", "magrittr", "MASS", "mathjaxr", "Matrix", "matrixStats", "metafor", "mgcv", "mnormt", "nlme", "nloptr", "OpenMx", "openssl", "pcaPP", "plyr", "posterior", "processx", "ps", "randtoolbox", "rbibutils", "RColorBrewer", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "Rdpack", "readxl", "rjags", "rlang", "rmarkdown", "roxygen2", "rprojroot", "rstan", "rstantools", "sass", "scales", "stargazer", "survival", "term", "testthat", "tibble", "tidygraph", "tidyselect", "tinytex", "tzdb", "usethis", "uuid", "vctrs", "waldo", "withr", "xfun"))
install.packages(c("blob", "broom", "checkmate", "cli", "clipr", "cluster", "colorspace", "commonmark", "copula", "crayon", "DBI", "dbplyr", "desc", "dplyr", "DT", "ellipse", "evaluate", "evd", "extrafont", "extras", "fansi", "gert", "ggplot2", "glue", "haven", "httr", "igraph", "knitr", "lavaan", "lme4", "loo", "magic", "magrittr", "MASS", "mathjaxr", "Matrix", "matrixStats", "metafor", "mgcv", "mnormt", "nlme", "nloptr", "OpenMx", "openssl", "pcaPP", "plyr", "posterior", "processx", "ps", "randtoolbox", "rbibutils", "RColorBrewer", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "Rdpack", "readxl", "rjags", "rlang", "rmarkdown", "roxygen2", "rprojroot", "rstan", "rstantools", "sass", "scales", "stargazer", "survival", "term", "testthat", "tibble", "tidygraph", "tidyselect", "tinytex", "tzdb", "usethis", "uuid", "vctrs", "waldo", "withr", "xfun"))
install.packages(c("blob", "broom", "checkmate", "cli", "clipr", "cluster", "colorspace", "commonmark", "copula", "crayon", "DBI", "dbplyr", "desc", "dplyr", "DT", "ellipse", "evaluate", "evd", "extrafont", "extras", "fansi", "gert", "ggplot2", "glue", "haven", "httr", "igraph", "knitr", "lavaan", "lme4", "loo", "magic", "magrittr", "MASS", "mathjaxr", "Matrix", "matrixStats", "metafor", "mgcv", "mnormt", "nlme", "nloptr", "OpenMx", "openssl", "pcaPP", "plyr", "posterior", "processx", "ps", "randtoolbox", "rbibutils", "RColorBrewer", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "Rdpack", "readxl", "rjags", "rlang", "rmarkdown", "roxygen2", "rprojroot", "rstan", "rstantools", "sass", "scales", "stargazer", "survival", "term", "testthat", "tibble", "tidygraph", "tidyselect", "tinytex", "tzdb", "usethis", "uuid", "vctrs", "waldo", "withr", "xfun"))
x <- read.csv("C:/Users/vc18e501/Desktop/aae main_06-14-2022_for robmen_revised.csv")
library(meta)
library(metafor)
library(netmeta)
library(readxl)
library(dplyr)
library(devtools)
install_github("esm-ispm-unibe-ch/NMAJags")
library(NMAJags)
library(R2jags)
library(shiny)
library(data.table)
library(DT)
library(dplyr)
require(tidyverse)
library(devtools)
#*********************************************************************************
#             Load the libraries needed
#*********************************************************************************
library(meta)
library(metafor)
library(netmeta)
library(rlang)
install.packages(c("cli", "rlang"))
install.packages(c("cli", "rlang"))
install.packages(c("cli", "rlang"))
library(netmeta)
install.packages("rlang")
install.packages("rlang")
library(tibble)
shiny::runApp('O:/PhD/PhD project/Publication bias/Framework reporting bias/rob-men Shiny/reporting-bias/reporting-bias/rob-men')
x <- read.csv("C:/Users/vc18e501/Desktop/aae main_06-14-2022_for robmen_revised.csv")
pw <- pairwise(treat=t, event=r, n=n, data = x, studlab = id)
nma <- netmeta(pw)
View(x)
data <- x[!is.na(r),]
data <- x[!is.na(data$r),]
data <- x[!is.na(x$r),]
newdata <- pool_variances(nma, data)
View(newdata)
library(tidyverse)
install.packages("cli")
install.packages("cli")
library(cli)
sessionInfo()
remove.packages("cli")
install.packages("cli")
quit*()
quit()
install.packages("cli")
shiny::runApp('O:/PhD/PhD project/Publication bias/Framework reporting bias/rob-men Shiny/reporting-bias/reporting-bias/rob-men')
shiny::runApp('O:/PhD/PhD project/Publication bias/Framework reporting bias/rob-men Shiny/reporting-bias/reporting-bias/rob-men')
runApp('O:/PhD/PhD project/Publication bias/Framework reporting bias/rob-men Shiny/reporting-bias/reporting-bias/rob-men')
load("O:/PhD/PhD project/extension ranking metrics/outcomes Schizophrenia.Rdata")
View(outcomesSchizo)
shiny::runApp('O:/PhD/PhD project/Publication bias/Framework reporting bias/rob-men Shiny/reporting-bias/reporting-bias/rob-men')
runApp('O:/PhD/PhD project/Publication bias/Framework reporting bias/rob-men Shiny/reporting-bias/reporting-bias/rob-men')
runApp('O:/PhD/PhD project/Publication bias/Framework reporting bias/rob-men Shiny/reporting-bias/reporting-bias/rob-men')
runApp('O:/PhD/PhD project/Publication bias/Framework reporting bias/rob-men Shiny/rob-men-redux')
runApp('O:/PhD/PhD project/Publication bias/Framework reporting bias/rob-men Shiny/rob-men-redux')
library(BUGSnet)
library(BUGSnet)
install_github("esm-ispm-unibe-ch/NMAJags")
library(NMAJags)
NMAJags::example.NMAJags()
shiny::runApp('O:/PhD/PhD project/Publication bias/Framework reporting bias/rob-men Shiny/reporting-bias/reporting-bias/rob-men')
runApp('O:/PhD/PhD project/Publication bias/Framework reporting bias/rob-men Shiny/reporting-bias/reporting-bias/rob-men')
ls()
ls()
Q
runApp('O:/PhD/PhD project/Publication bias/Framework reporting bias/rob-men Shiny/reporting-bias/reporting-bias/rob-men')
ls()
ls()
c
n
n
n
n
n
n
n
n
n
n
n
n
n
n
Q
runApp('O:/PhD/PhD project/Publication bias/Framework reporting bias/rob-men Shiny/reporting-bias/reporting-bias/rob-men')
ls()
ls()
state
dim(state$bleague)
state$bleague
state$table1
output
netgraph
colors()
col2rgb("seagreen2")
rgb(78,238,148)
rgb(0.2,0.5,0.5,0.5)
rgb(0.2, 0.5, 0.5)
rgb(0.2, 0.5, 0.5, 1)
rgb(0.2, 0.5, 0.5, 0)
shiny::runApp('O:/PhD/PhD project/Publication bias/Framework reporting bias/rob-men Shiny/rob-men-redux')
runApp()
runApp('O:/PhD/PhD project/Publication bias/Framework reporting bias/rob-men Shiny/rob-men-redux')
runApp('O:/PhD/PhD project/Publication bias/Framework reporting bias/rob-men Shiny/rob-men-redux')
p <- ggplot(spie.data, aes(x = pos)) +
geom_vline(xintercept = cumsum(c(0, theta)), colour = "darkgrey", size = 0.2) +
geom_hline(yintercept = seq(min(outcome.range),max(outcome.range),length.out = yticksnum),
colour = "darkgrey", size = 0.2) +
geom_bar(aes(y = outcome), fill="#0D8E45", width = theta, color = rgb(0.2,0.5,0.5,0.9),
stat = "identity") +
coord_polar(theta = "x") +
scale_x_continuous(labels = outcome.label, breaks = pos) +
scale_y_continuous(limits=c(min(outcome.range),max(outcome.range)),
breaks=seq(min(outcome.range),max(outcome.range),length.out = yticksnum)) +
theme(panel.grid.major.x = element_blank(), panel.grid.major.y = element_blank(),
panel.grid.minor.x = element_blank(), panel.grid.minor.y = element_blank(),
panel.background = element_blank(),   axis.title = element_blank(),
axis.text.x=element_text(colour="black"),
axis.text.y = element_blank(), axis.ticks = element_blank(),
plot.margin = margin(0.5, 0, 0.5, 0, "cm")) +
# Add axis labels
annotate("text", x=0, y=seq(min(outcome.range),max(outcome.range),length.out = yticksnum),
label=round(seq(min(outcome.range),max(outcome.range),length.out = yticksnum),2),
colour="slategrey", hjust=1)
spie.chart <- function(outcome, theta, outcome.range=c(0,1), outcome.label, yticksnum=5){
spie.data <- data.frame(outcome = outcome, theta = theta)
pos <- 0.5 * (cumsum(theta) + cumsum(c(0, theta[-length(theta)])))
p <- ggplot(spie.data, aes(x = pos)) +
geom_vline(xintercept = cumsum(c(0, theta)), colour = "darkgrey", size = 0.2) +
geom_hline(yintercept = seq(min(outcome.range),max(outcome.range),length.out = yticksnum),
colour = "darkgrey", size = 0.2) +
geom_bar(aes(y = outcome), fill="#0D8E45", width = theta, color = rgb(0.2,0.5,0.5,0.9),
stat = "identity") +
coord_polar(theta = "x") +
scale_x_continuous(labels = outcome.label, breaks = pos) +
scale_y_continuous(limits=c(min(outcome.range),max(outcome.range)),
breaks=seq(min(outcome.range),max(outcome.range),length.out = yticksnum)) +
theme(panel.grid.major.x = element_blank(), panel.grid.major.y = element_blank(),
panel.grid.minor.x = element_blank(), panel.grid.minor.y = element_blank(),
panel.background = element_blank(),   axis.title = element_blank(),
axis.text.x=element_text(colour="black"),
axis.text.y = element_blank(), axis.ticks = element_blank(),
plot.margin = margin(0.5, 0, 0.5, 0, "cm")) +
# Add axis labels
annotate("text", x=0, y=seq(min(outcome.range),max(outcome.range),length.out = yticksnum),
label=round(seq(min(outcome.range),max(outcome.range),length.out = yticksnum),2),
colour="slategrey", hjust=1)
area <- (1/(2*pi*(max(outcome.range)-min(outcome.range))^2))*sum(theta*outcome^2)
return(list(p, paste("Area inside spie chart = ", round(area,3))))
}
NBspie <- function(outcomesBen, outcomesHarm, weightsBen, weightsHarm, labelsBen, labelsHarm, lambda = seq(0, 1, by=0.05)) {
### FUNCTION ARGUMENTS:
# outcomesBen = array of beneficial outcomes with treatments as row names; must be between 0-1
# outcomesHarm = array of harmful outcomes with treatments as row names; must be between 0-1
# weightsBen = (vector of) weights for the beneficial outcomes; must add up to 1
# weightsHarm = (vector of) weights for the harmful outcomes; must add up to 1
# labelsBen = string vector of outcome labels for the beneficial outcomes
# labelsHArm = string vector of outcome labels for the harmful outcomes
# lambda = (vector of) threshold values needed for the calculation of net benefit; values should be between 0 and 1
pos <- t(sapply(rownames(outcomesBen) , function(i) spie.chart(as.numeric(outcomesBen[i,]),theta=weightsBen*2*pi,outcome.label = labelsBen)))
colnames(pos) <- c("chart", "area")
neg <- t(sapply(rownames(outcomesHarm) , function(i) spie.chart(as.numeric(outcomesHarm[i,]),theta=weightsHarm*2*pi,outcome.label = labelsHarm)))
colnames(neg) <- c("chart", "area")
NB <- array(data = NA, dim = c(length(lambda), nrow(outcomesBen)), dimnames = list(lambda, rownames(outcomesBen)))
for (i in 1:length(lambda)) {
NB[i,] <- as.numeric(gsub("Area inside spie chart = ", "", pos[,"area"])) - (lambda[i]*as.numeric(gsub("Area inside spie chart = ", "", neg[,"area"])))
}
return(list(SPIEchart_Ben=pos, SPIEchart_Harm=neg, NetBenefit=NB))
}
load("G:/My Drive/PhD project/extension ranking metrics/outcomes GRISELDA.RData")
library(ggplot2)
source("spie charts R code.R")
source("NBspie.R")
install.packages("metaumbrella")
library("metaumbrella")
knitr::opts_chunk$set(echo = F)
library(devtools)
install_github("esm-ispm-unibe-ch/NMAJags")
library(NMAJags)
library(R2jags)
library(netmeta)
library(meta)
library(metafor)
library(readxl)
#get the data and select them
Schizo <- read_excel("~/_mydrive/Schizophrenia/Schizo.xlsx", na = "NA")
knitr::opts_chunk$set(echo = F)
library(devtools)
install_github("esm-ispm-unibe-ch/NMAJags")
library(NMAJags)
library(R2jags)
library(netmeta)
library(meta)
library(metafor)
library(readxl)
#get the data and select them
Schizo <- read_excel("~/_mydrive/Schizophrenia/Schizo.xlsx", na = "NA")
library(meta)
library(metafor)
library(netmeta)
library(readxl)
library(dplyr)
library(devtools)
install_github("esm-ispm-unibe-ch/NMAJags")
library(NMAJags)
library(R2jags)
make.jagsNMA.data()
make.jagsNMA.data
library(ggplot2)
load("outcomes Griselda.Rdata")
source("spie charts R code.R")
#try spie chart + NET BENEFIT
# pos <- t(sapply(rownames(outcomes) , function(i) spie.chart(as.numeric(outcomes[i,2:4]),theta=c(0.4,0.35,0.25)*2*pi,outcome.label = colnames(outcomes)[2:4])))
# colnames(pos) <- c("chart", "area")
#
# neg <- t(sapply(rownames(outcomes) , function(i) spie.chart(as.numeric(outcomes[i,5:6]),theta=c(0.5,0.5)*2*pi,outcome.label = colnames(outcomes)[5:6])))
# colnames(neg) <- c("chart", "area")
#
# lambda <- seq(0.1, 1, by=0.05)     # HAVE TO CHECK AND DECIDE VALUES OF LAMBDA
#
# NB <- array(data = NA, dim = c(length(lambda), length(treat)), dimnames = list(lambda, treat))
# for (i in 1:length(lambda)) {
#   NB[i,] <- as.numeric(gsub("Area inside spie chart = ", "", pos[,"area"])) - lambda[i]*as.numeric(gsub("Area inside spie chart = ", "", neg[,"area"]))
# }
# or run NBspie function
source("NBspie.R")
NBspieGRISELDA <- NBspie(outcomes[,c(2,4)], outcomes[,5:6], c(0.3,0.7), c(0.3,0.7),  colnames(outcomes)[c(2,4)],  colnames(outcomes)[5:6])
library(meta)
shiny::runApp('G:/My Drive/PhD project/extension ranking metrics/shiny')
runApp()
runApp('G:/My Drive/PhD project/extension ranking metrics/shiny')
runApp()
runApp('G:/My Drive/PhD project/extension ranking metrics/shiny')
runApp()
runApp('G:/My Drive/PhD project/extension ranking metrics/shiny')
runApp('G:/My Drive/PhD project/extension ranking metrics/shiny')
runApp('G:/My Drive/PhD project/extension ranking metrics/shiny')
runApp('G:/My Drive/PhD project/extension ranking metrics/shiny')
runApp()
runApp('G:/My Drive/PhD project/extension ranking metrics/shiny')
runApp('G:/My Drive/PhD project/extension ranking metrics/shiny')
runApp('G:/My Drive/PhD project/extension ranking metrics/shiny')
shiny::runApp('G:/My Drive/PhD project/extension ranking metrics/shiny')
runApp('G:/My Drive/PhD project/extension ranking metrics/shiny')
runApp('G:/My Drive/PhD project/extension ranking metrics/shiny')
runApp()
runApp('G:/My Drive/PhD project/extension ranking metrics/shiny')
runApp('G:/My Drive/PhD project/extension ranking metrics/shiny')
runApp('G:/My Drive/PhD project/extension ranking metrics/shiny')
runApp('G:/My Drive/PhD project/extension ranking metrics/shiny')
runApp('G:/My Drive/PhD project/extension ranking metrics/shiny')
runApp('G:/My Drive/PhD project/extension ranking metrics/shiny')
runApp('G:/My Drive/PhD project/extension ranking metrics/shiny')
runApp('G:/My Drive/PhD project/extension ranking metrics/shiny')
runApp('G:/My Drive/PhD project/extension ranking metrics/shiny')
data <- as.data.frame(read_excel("GriseldaOutcomes.xlsx", na="NA"))[, 1:7]
colnames(data)<-c("Treatment","Treatment ID", "Response", "efficacy", "Remission", "Dropout due to any cause", "Dropout due to AE")
shiny::runApp('G:/My Drive/PhD project/extension ranking metrics/shiny')
runApp()
runApp('G:/My Drive/PhD project/extension ranking metrics/shiny')
runApp('G:/My Drive/PhD project/extension ranking metrics/shiny')
runApp('G:/My Drive/PhD project/extension ranking metrics/shiny')
runApp('G:/My Drive/PhD project/extension ranking metrics/shiny')
runApp()
runApp('G:/My Drive/PhD project/extension ranking metrics/shiny')
runApp()
runApp('G:/My Drive/PhD project/extension ranking metrics/shiny')
runApp()
runApp('G:/My Drive/PhD project/extension ranking metrics/shiny')
runApp()
runApp('G:/My Drive/PhD project/extension ranking metrics/shiny')
NBspieGRISELDA()
NBspieGRISELDA()$NetBenefit
runApp('G:/My Drive/PhD project/extension ranking metrics/shiny')
gg.m
runApp('G:/My Drive/PhD project/extension ranking metrics/shiny')
runApp()
runApp('G:/My Drive/PhD project/extension ranking metrics/shiny')
output
runApp('G:/My Drive/PhD project/extension ranking metrics/shiny')
runApp('G:/My Drive/PhD project/extension ranking metrics/shiny')
runApp('G:/My Drive/PhD project/extension ranking metrics/shiny')
runApp('G:/My Drive/PhD project/extension ranking metrics/shiny')
shiny::runApp('G:/My Drive/PhD project/extension ranking metrics/shiny')
runApp()
runApp('G:/My Drive/PhD project/extension ranking metrics/shiny')
runApp('G:/My Drive/PhD project/extension ranking metrics/shiny')
runApp('G:/My Drive/PhD project/extension ranking metrics/shiny')
runApp('G:/My Drive/PhD project/extension ranking metrics/shiny')
runApp()
runApp('G:/My Drive/PhD project/extension ranking metrics/shiny')
runApp('G:/My Drive/PhD project/extension ranking metrics/shiny')
runApp('G:/My Drive/PhD project/extension ranking metrics/shiny')
runApp('G:/My Drive/PhD project/extension ranking metrics/shiny')
runApp('G:/My Drive/PhD project/extension ranking metrics/shiny')
runApp('G:/My Drive/PhD project/extension ranking metrics/shiny')
runApp('O:/PhD/PhD project/Publication bias/Framework reporting bias/rob-men Shiny/rob-men-redux')
runApp('O:/PhD/PhD project/Publication bias/Framework reporting bias/rob-men Shiny/rob-men-redux')
runApp('O:/PhD/PhD project/Publication bias/Framework reporting bias/rob-men Shiny/rob-men-redux')
runApp('O:/PhD/PhD project/Publication bias/Framework reporting bias/rob-men Shiny/rob-men-redux')
print(x)
print(x)
runApp('O:/PhD/PhD project/Publication bias/Framework reporting bias/rob-men Shiny/rob-men-redux')
View(make.jagsNMA.data)
View(make.jagsNMA.data)
runApp('O:/PhD/PhD project/Publication bias/Framework reporting bias/rob-men Shiny/rob-men-redux')
runApp('O:/PhD/PhD project/Publication bias/Framework reporting bias/rob-men Shiny/rob-men-redux')
View(make.jagsNMA.data)
shiny::runApp('O:/PhD/PhD project/Publication bias/Framework reporting bias/rob-men Shiny/rob-men-redux')
shiny::runApp('O:/PhD/PhD project/Publication bias/Framework reporting bias/rob-men Shiny/rob-men-redux')
shiny::runApp('O:/PhD/PhD project/Publication bias/Framework reporting bias/rob-men Shiny/rob-men-redux')
runApp('O:/PhD/PhD project/Publication bias/Framework reporting bias/rob-men Shiny/rob-men-redux')
shiny::runApp('O:/PhD/PhD project/Publication bias/Framework reporting bias/rob-men Shiny/rob-men-redux')
install.packages("metaumbrella")
library(metaumbrella)
shiny::runApp('O:/PhD/PhD project/Publication bias/Framework reporting bias/rob-men Shiny/rob-men')
runApp('O:/PhD/PhD project/Publication bias/Framework reporting bias/rob-men Shiny/rob-men')
runApp('O:/PhD/PhD project/Publication bias/Framework reporting bias/rob-men Shiny/rob-men')
?traceplot
pain <- read.csv("C:/Users/vc18e501/Desktop/pain.csv")
data <- make.jagsNMA.data(id, n=n, y=mean, sd=sd, t=t, data=pain, reference = "Placebo")
nma <- jags(data = data, inits = NULL,
parameters.to.save = c("SMD", "SMD.ref", "tau"), n.chains = 2, n.iter = 10000,
n.burnin = 2000, DIC=F, n.thin=2,
model.file = modelNMAContinuous)
library(devtools)
library(NMAJags)
library(R2jags)
pain <- read.csv("C:/Users/vc18e501/Desktop/pain.csv")
data <- make.jagsNMA.data(id, n=n, y=mean, sd=sd, t=t, data=pain, reference = "Placebo")
nma <- jags(data = data, inits = NULL,
parameters.to.save = c("SMD", "SMD.ref", "tau"), n.chains = 2, n.iter = 10000,
n.burnin = 2000, DIC=F, n.thin=2,
model.file = modelNMAContinuous)
traceplot(nma, varname=c("SMD.ref","tau"))
?traceplot
shiny::runApp('O:/PhD/PhD project/Publication bias/Framework reporting bias/rob-men Shiny/rob-men')
traceplot(nma, varname=c("SMD.ref","tau"), ask = F)
traceplot(nma, varname=c("SMD.ref","tau"), ask = F)
library(devtools)
library(NMAJags)
library(R2jags)
pain <- read.csv("C:/Users/vc18e501/Desktop/pain.csv")
data <- make.jagsNMA.data(id, n=n, y=mean, sd=sd, t=t, data=pain, reference = "Placebo")
nma <- jags(data = data, inits = NULL,
parameters.to.save = c("SMD", "SMD.ref", "tau"), n.chains = 2, n.iter = 10000,
n.burnin = 2000, DIC=F, n.thin=2,
model.file = modelNMAContinuous)
traceplot(nma, varname=c("SMD.ref","tau"), ask = F)
pdf(file)
traceplot(nma, varname=c("SMD.ref","tau"))
dev.off()
dev.off()
dev.off()
pdf()
traceplot(nma, varname=c("SMD.ref","tau"))
dev.off()
dev.off()
pdf()
R2jags::traceplot(nma, varname=c("SMD.ref","tau"), ask=FALSE)
dev.off()
runApp('O:/PhD/PhD project/Publication bias/Framework reporting bias/rob-men Shiny/rob-men')
runApp('O:/PhD/PhD project/Publication bias/Framework reporting bias/rob-men Shiny/rob-men')
runApp('O:/PhD/PhD project/Publication bias/Framework reporting bias/rob-men Shiny/rob-men')
runApp('O:/PhD/PhD project/Publication bias/Framework reporting bias/rob-men Shiny/rob-men')
runApp()
runApp('O:/PhD/PhD project/Publication bias/Framework reporting bias/rob-men Shiny/rob-men')
shiny::runApp()
library(BUGSnet)
library(BUGSnet)
install_github("esm-ispm-unibe-ch/NMAJags")
library(NMAJags)
make.jagsNMA.data
runApp()
library(gemtc)
dunif(0,5)
modelNMRContinuous_bExch <- function ()
{
for (i in 1:ns) {
w[i, 1] <- 0
delta[i, t[i, 1]] <- 0
u[i] ~ dnorm(0, 1e-04)
for (k in 1:na[i]) {
y[i, t[i, k]] ~ dnorm(phi[i, t[i, k]], prec[i, t[i,
k]])
phi[i, t[i, k]] <- (u[i] + delta1[i, t[i, k]]) *
pooled.sd[i]
delta1[i, t[i, k]] <- delta[i, t[i, k]] + beta[t[i,
1], t[i, k]] * variab[i]
}
for (k in 2:na[i]) {
delta[i, t[i, k]] ~ dnorm(md[i, t[i, k]], taud[i,
t[i, k]])
md[i, t[i, k]] <- d[t[i, k]] - d[t[i, 1]] + sw[i,
k]
taud[i, t[i, k]] <- PREC * 2 * (k - 1)/k
w[i, k] <- (delta[i, t[i, k]] - d[t[i, k]] + d[t[i,
1]])
sw[i, k] <- sum(w[i, 1:(k - 1)])/(k - 1)
}
}
d[ref] <- 0
for (k in 1:(ref - 1)) {
d[k] ~ dnorm(0, 1e-04)
}
for (k in (ref + 1):nt) {
d[k] ~ dnorm(0, 1e-04)
}
tau ~ dunif(0, 5)
PREC <- 1/pow(tau, 2)
for (c in 1:(nt - 1)) {
for (k in (c + 1):nt) {
SMD[c, k] <- d[c] - d[k]
}
}
for (c in 1:nt) {
SMD.ref[c] <- d[c] - d[ref]
}
for (c in 1:(ref - 1)) {
X[c] <- d[c] - d[ref]
predSMD.ref[c] ~ dnorm(X[c], PREC)
}
for (c in (ref + 1):nt) {
X[c] <- d[c] - d[ref]
predSMD.ref[c] ~ dnorm(X[c], PREC)
}
for (c in 1:(nt - 1)) {
for (k in (c + 1):nt) {
predSMD[c, k] ~ dnorm(SMD[c, k], PREC)
}
}
order[1:nt] <- rank(d[1:nt])
for (k in 1:nt) {
most.effective[k] <- equals(order[k], 1)
for (j in 1:nt) {
effectiveness[k, j] <- equals(order[k], j)
}
}
for (k in 1:nt) {
for (j in 1:nt) {
cumeffectiveness[k, j] <- sum(effectiveness[k, 1:j])
}
}
for (k in 1:nt) {
SUCRA[k] <- sum(cumeffectiveness[k, 1:(nt - 1)])/(nt -
1)
}
for (i in 1:nt) {
for (j in 1:nt) {
beta[i, j] <- b[j] - b[i]
}
}
b[ref] <- 0
for (k in 1:(ref - 1)) {
b[k] ~ dnorm(B, 1/pow(tau_b,2))
}
for (k in (ref + 1):nt) {
b[k] ~ dnorm(B, 1/pow(tau_b,2))
}
B ~ dnorm(0, 1e-04)
tau_b ~ unif(0, 100)
}
