shiny::runApp('O:/PhD/PhD project/Publication bias/Framework reporting bias/rob-men Shiny/rob-men-redux')
runApp()
runApp('O:/PhD/PhD project/Publication bias/Framework reporting bias/rob-men Shiny/rob-men-redux')
runApp('O:/PhD/PhD project/Publication bias/Framework reporting bias/rob-men Shiny/rob-men-redux')
p <- ggplot(spie.data, aes(x = pos)) +
geom_vline(xintercept = cumsum(c(0, theta)), colour = "darkgrey", size = 0.2) +
geom_hline(yintercept = seq(min(outcome.range),max(outcome.range),length.out = yticksnum),
colour = "darkgrey", size = 0.2) +
geom_bar(aes(y = outcome), fill="#0D8E45", width = theta, color = rgb(0.2,0.5,0.5,0.9),
stat = "identity") +
coord_polar(theta = "x") +
scale_x_continuous(labels = outcome.label, breaks = pos) +
scale_y_continuous(limits=c(min(outcome.range),max(outcome.range)),
breaks=seq(min(outcome.range),max(outcome.range),length.out = yticksnum)) +
theme(panel.grid.major.x = element_blank(), panel.grid.major.y = element_blank(),
panel.grid.minor.x = element_blank(), panel.grid.minor.y = element_blank(),
panel.background = element_blank(),   axis.title = element_blank(),
axis.text.x=element_text(colour="black"),
axis.text.y = element_blank(), axis.ticks = element_blank(),
plot.margin = margin(0.5, 0, 0.5, 0, "cm")) +
# Add axis labels
annotate("text", x=0, y=seq(min(outcome.range),max(outcome.range),length.out = yticksnum),
label=round(seq(min(outcome.range),max(outcome.range),length.out = yticksnum),2),
colour="slategrey", hjust=1)
spie.chart <- function(outcome, theta, outcome.range=c(0,1), outcome.label, yticksnum=5){
spie.data <- data.frame(outcome = outcome, theta = theta)
pos <- 0.5 * (cumsum(theta) + cumsum(c(0, theta[-length(theta)])))
p <- ggplot(spie.data, aes(x = pos)) +
geom_vline(xintercept = cumsum(c(0, theta)), colour = "darkgrey", size = 0.2) +
geom_hline(yintercept = seq(min(outcome.range),max(outcome.range),length.out = yticksnum),
colour = "darkgrey", size = 0.2) +
geom_bar(aes(y = outcome), fill="#0D8E45", width = theta, color = rgb(0.2,0.5,0.5,0.9),
stat = "identity") +
coord_polar(theta = "x") +
scale_x_continuous(labels = outcome.label, breaks = pos) +
scale_y_continuous(limits=c(min(outcome.range),max(outcome.range)),
breaks=seq(min(outcome.range),max(outcome.range),length.out = yticksnum)) +
theme(panel.grid.major.x = element_blank(), panel.grid.major.y = element_blank(),
panel.grid.minor.x = element_blank(), panel.grid.minor.y = element_blank(),
panel.background = element_blank(),   axis.title = element_blank(),
axis.text.x=element_text(colour="black"),
axis.text.y = element_blank(), axis.ticks = element_blank(),
plot.margin = margin(0.5, 0, 0.5, 0, "cm")) +
# Add axis labels
annotate("text", x=0, y=seq(min(outcome.range),max(outcome.range),length.out = yticksnum),
label=round(seq(min(outcome.range),max(outcome.range),length.out = yticksnum),2),
colour="slategrey", hjust=1)
area <- (1/(2*pi*(max(outcome.range)-min(outcome.range))^2))*sum(theta*outcome^2)
return(list(p, paste("Area inside spie chart = ", round(area,3))))
}
NBspie <- function(outcomesBen, outcomesHarm, weightsBen, weightsHarm, labelsBen, labelsHarm, lambda = seq(0, 1, by=0.05)) {
### FUNCTION ARGUMENTS:
# outcomesBen = array of beneficial outcomes with treatments as row names; must be between 0-1
# outcomesHarm = array of harmful outcomes with treatments as row names; must be between 0-1
# weightsBen = (vector of) weights for the beneficial outcomes; must add up to 1
# weightsHarm = (vector of) weights for the harmful outcomes; must add up to 1
# labelsBen = string vector of outcome labels for the beneficial outcomes
# labelsHArm = string vector of outcome labels for the harmful outcomes
# lambda = (vector of) threshold values needed for the calculation of net benefit; values should be between 0 and 1
pos <- t(sapply(rownames(outcomesBen) , function(i) spie.chart(as.numeric(outcomesBen[i,]),theta=weightsBen*2*pi,outcome.label = labelsBen)))
colnames(pos) <- c("chart", "area")
neg <- t(sapply(rownames(outcomesHarm) , function(i) spie.chart(as.numeric(outcomesHarm[i,]),theta=weightsHarm*2*pi,outcome.label = labelsHarm)))
colnames(neg) <- c("chart", "area")
NB <- array(data = NA, dim = c(length(lambda), nrow(outcomesBen)), dimnames = list(lambda, rownames(outcomesBen)))
for (i in 1:length(lambda)) {
NB[i,] <- as.numeric(gsub("Area inside spie chart = ", "", pos[,"area"])) - (lambda[i]*as.numeric(gsub("Area inside spie chart = ", "", neg[,"area"])))
}
return(list(SPIEchart_Ben=pos, SPIEchart_Harm=neg, NetBenefit=NB))
}
load("G:/My Drive/PhD project/extension ranking metrics/outcomes GRISELDA.RData")
library(ggplot2)
source("spie charts R code.R")
source("NBspie.R")
install.packages("metaumbrella")
library("metaumbrella")
knitr::opts_chunk$set(echo = F)
library(devtools)
install_github("esm-ispm-unibe-ch/NMAJags")
library(NMAJags)
library(R2jags)
library(netmeta)
library(meta)
library(metafor)
library(readxl)
#get the data and select them
Schizo <- read_excel("~/_mydrive/Schizophrenia/Schizo.xlsx", na = "NA")
knitr::opts_chunk$set(echo = F)
library(devtools)
install_github("esm-ispm-unibe-ch/NMAJags")
library(NMAJags)
library(R2jags)
library(netmeta)
library(meta)
library(metafor)
library(readxl)
#get the data and select them
Schizo <- read_excel("~/_mydrive/Schizophrenia/Schizo.xlsx", na = "NA")
library(meta)
library(metafor)
library(netmeta)
library(readxl)
library(dplyr)
library(devtools)
install_github("esm-ispm-unibe-ch/NMAJags")
library(NMAJags)
library(R2jags)
make.jagsNMA.data()
make.jagsNMA.data
library(ggplot2)
load("outcomes Griselda.Rdata")
source("spie charts R code.R")
#try spie chart + NET BENEFIT
# pos <- t(sapply(rownames(outcomes) , function(i) spie.chart(as.numeric(outcomes[i,2:4]),theta=c(0.4,0.35,0.25)*2*pi,outcome.label = colnames(outcomes)[2:4])))
# colnames(pos) <- c("chart", "area")
#
# neg <- t(sapply(rownames(outcomes) , function(i) spie.chart(as.numeric(outcomes[i,5:6]),theta=c(0.5,0.5)*2*pi,outcome.label = colnames(outcomes)[5:6])))
# colnames(neg) <- c("chart", "area")
#
# lambda <- seq(0.1, 1, by=0.05)     # HAVE TO CHECK AND DECIDE VALUES OF LAMBDA
#
# NB <- array(data = NA, dim = c(length(lambda), length(treat)), dimnames = list(lambda, treat))
# for (i in 1:length(lambda)) {
#   NB[i,] <- as.numeric(gsub("Area inside spie chart = ", "", pos[,"area"])) - lambda[i]*as.numeric(gsub("Area inside spie chart = ", "", neg[,"area"]))
# }
# or run NBspie function
source("NBspie.R")
NBspieGRISELDA <- NBspie(outcomes[,c(2,4)], outcomes[,5:6], c(0.3,0.7), c(0.3,0.7),  colnames(outcomes)[c(2,4)],  colnames(outcomes)[5:6])
library(meta)
shiny::runApp('G:/My Drive/PhD project/extension ranking metrics/shiny')
runApp()
runApp('G:/My Drive/PhD project/extension ranking metrics/shiny')
runApp()
runApp('G:/My Drive/PhD project/extension ranking metrics/shiny')
runApp()
runApp('G:/My Drive/PhD project/extension ranking metrics/shiny')
runApp('G:/My Drive/PhD project/extension ranking metrics/shiny')
runApp('G:/My Drive/PhD project/extension ranking metrics/shiny')
runApp('G:/My Drive/PhD project/extension ranking metrics/shiny')
runApp()
runApp('G:/My Drive/PhD project/extension ranking metrics/shiny')
runApp('G:/My Drive/PhD project/extension ranking metrics/shiny')
runApp('G:/My Drive/PhD project/extension ranking metrics/shiny')
shiny::runApp('G:/My Drive/PhD project/extension ranking metrics/shiny')
runApp('G:/My Drive/PhD project/extension ranking metrics/shiny')
runApp('G:/My Drive/PhD project/extension ranking metrics/shiny')
runApp()
runApp('G:/My Drive/PhD project/extension ranking metrics/shiny')
runApp('G:/My Drive/PhD project/extension ranking metrics/shiny')
runApp('G:/My Drive/PhD project/extension ranking metrics/shiny')
runApp('G:/My Drive/PhD project/extension ranking metrics/shiny')
runApp('G:/My Drive/PhD project/extension ranking metrics/shiny')
runApp('G:/My Drive/PhD project/extension ranking metrics/shiny')
runApp('G:/My Drive/PhD project/extension ranking metrics/shiny')
runApp('G:/My Drive/PhD project/extension ranking metrics/shiny')
runApp('G:/My Drive/PhD project/extension ranking metrics/shiny')
data <- as.data.frame(read_excel("GriseldaOutcomes.xlsx", na="NA"))[, 1:7]
colnames(data)<-c("Treatment","Treatment ID", "Response", "efficacy", "Remission", "Dropout due to any cause", "Dropout due to AE")
shiny::runApp('G:/My Drive/PhD project/extension ranking metrics/shiny')
runApp()
runApp('G:/My Drive/PhD project/extension ranking metrics/shiny')
runApp('G:/My Drive/PhD project/extension ranking metrics/shiny')
runApp('G:/My Drive/PhD project/extension ranking metrics/shiny')
runApp('G:/My Drive/PhD project/extension ranking metrics/shiny')
runApp()
runApp('G:/My Drive/PhD project/extension ranking metrics/shiny')
runApp()
runApp('G:/My Drive/PhD project/extension ranking metrics/shiny')
runApp()
runApp('G:/My Drive/PhD project/extension ranking metrics/shiny')
runApp()
runApp('G:/My Drive/PhD project/extension ranking metrics/shiny')
NBspieGRISELDA()
NBspieGRISELDA()$NetBenefit
runApp('G:/My Drive/PhD project/extension ranking metrics/shiny')
gg.m
runApp('G:/My Drive/PhD project/extension ranking metrics/shiny')
runApp()
runApp('G:/My Drive/PhD project/extension ranking metrics/shiny')
output
runApp('G:/My Drive/PhD project/extension ranking metrics/shiny')
runApp('G:/My Drive/PhD project/extension ranking metrics/shiny')
runApp('G:/My Drive/PhD project/extension ranking metrics/shiny')
runApp('G:/My Drive/PhD project/extension ranking metrics/shiny')
shiny::runApp('G:/My Drive/PhD project/extension ranking metrics/shiny')
runApp()
runApp('G:/My Drive/PhD project/extension ranking metrics/shiny')
runApp('G:/My Drive/PhD project/extension ranking metrics/shiny')
runApp('G:/My Drive/PhD project/extension ranking metrics/shiny')
runApp('G:/My Drive/PhD project/extension ranking metrics/shiny')
runApp()
runApp('G:/My Drive/PhD project/extension ranking metrics/shiny')
runApp('G:/My Drive/PhD project/extension ranking metrics/shiny')
runApp('G:/My Drive/PhD project/extension ranking metrics/shiny')
runApp('G:/My Drive/PhD project/extension ranking metrics/shiny')
runApp('G:/My Drive/PhD project/extension ranking metrics/shiny')
runApp('G:/My Drive/PhD project/extension ranking metrics/shiny')
runApp('O:/PhD/PhD project/Publication bias/Framework reporting bias/rob-men Shiny/rob-men-redux')
runApp('O:/PhD/PhD project/Publication bias/Framework reporting bias/rob-men Shiny/rob-men-redux')
runApp('O:/PhD/PhD project/Publication bias/Framework reporting bias/rob-men Shiny/rob-men-redux')
runApp('O:/PhD/PhD project/Publication bias/Framework reporting bias/rob-men Shiny/rob-men-redux')
print(x)
print(x)
runApp('O:/PhD/PhD project/Publication bias/Framework reporting bias/rob-men Shiny/rob-men-redux')
View(make.jagsNMA.data)
View(make.jagsNMA.data)
runApp('O:/PhD/PhD project/Publication bias/Framework reporting bias/rob-men Shiny/rob-men-redux')
runApp('O:/PhD/PhD project/Publication bias/Framework reporting bias/rob-men Shiny/rob-men-redux')
View(make.jagsNMA.data)
shiny::runApp('O:/PhD/PhD project/Publication bias/Framework reporting bias/rob-men Shiny/rob-men-redux')
shiny::runApp('O:/PhD/PhD project/Publication bias/Framework reporting bias/rob-men Shiny/rob-men-redux')
shiny::runApp('O:/PhD/PhD project/Publication bias/Framework reporting bias/rob-men Shiny/rob-men-redux')
runApp('O:/PhD/PhD project/Publication bias/Framework reporting bias/rob-men Shiny/rob-men-redux')
shiny::runApp('O:/PhD/PhD project/Publication bias/Framework reporting bias/rob-men Shiny/rob-men-redux')
install.packages("metaumbrella")
library(metaumbrella)
shiny::runApp('O:/PhD/PhD project/Publication bias/Framework reporting bias/rob-men Shiny/rob-men')
runApp('O:/PhD/PhD project/Publication bias/Framework reporting bias/rob-men Shiny/rob-men')
runApp('O:/PhD/PhD project/Publication bias/Framework reporting bias/rob-men Shiny/rob-men')
shiny::runApp('O:/PhD/PhD project/Publication bias/Framework reporting bias/rob-men Shiny/rob-men')
pain <- read.csv("C:/Users/vc18e501/Desktop/pain.csv")
data <- make.jagsNMA.data(id, n=n, y=mean, sd=sd, t=t, data=pain, reference = "Placebo")
data$variab <- var
nma <- jags(data = data, inits = NULL,
parameters.to.save = ifelse(length(data$variab)>10, c("SMD", "SMD.ref", "B", "tau"), c("SMD", "SMD.ref", "b", "tau")), n.chains = 2, n.iter = 10000,
n.burnin = 2000, DIC=F, n.thin=2,
model.file = modelNMRContinuous_bExch)
modelNMRContinuous_bExch <- function ()
{
for (i in 1:ns) {
w[i, 1] <- 0
delta[i, t[i, 1]] <- 0
u[i] ~ dnorm(0, 1e-04)
for (k in 1:na[i]) {
y[i, t[i, k]] ~ dnorm(phi[i, t[i, k]], prec[i, t[i,
k]])
phi[i, t[i, k]] <- (u[i] + delta1[i, t[i, k]]) *
pooled.sd[i]
delta1[i, t[i, k]] <- delta[i, t[i, k]] + beta[t[i,
1], t[i, k]] * variab[i]
}
for (k in 2:na[i]) {
delta[i, t[i, k]] ~ dnorm(md[i, t[i, k]], taud[i,
t[i, k]])
md[i, t[i, k]] <- d[t[i, k]] - d[t[i, 1]] + sw[i,
k]
taud[i, t[i, k]] <- PREC * 2 * (k - 1)/k
w[i, k] <- (delta[i, t[i, k]] - d[t[i, k]] + d[t[i,
1]])
sw[i, k] <- sum(w[i, 1:(k - 1)])/(k - 1)
}
}
d[ref] <- 0
for (k in 1:(ref - 1)) {
d[k] ~ dnorm(0, 1e-04)
}
for (k in (ref + 1):nt) {
d[k] ~ dnorm(0, 1e-04)
}
tau ~ dunif(0, 5)
PREC <- 1/pow(tau, 2)
for (c in 1:(nt - 1)) {
for (k in (c + 1):nt) {
SMD[c, k] <- d[c] - d[k]
}
}
for (c in 1:nt) {
SMD.ref[c] <- d[c] - d[ref]
}
for (c in 1:(ref - 1)) {
X[c] <- d[c] - d[ref]
predSMD.ref[c] ~ dnorm(X[c], PREC)
}
for (c in (ref + 1):nt) {
X[c] <- d[c] - d[ref]
predSMD.ref[c] ~ dnorm(X[c], PREC)
}
for (c in 1:(nt - 1)) {
for (k in (c + 1):nt) {
predSMD[c, k] ~ dnorm(SMD[c, k], PREC)
}
}
order[1:nt] <- rank(d[1:nt])
for (k in 1:nt) {
most.effective[k] <- equals(order[k], 1)
for (j in 1:nt) {
effectiveness[k, j] <- equals(order[k], j)
}
}
for (k in 1:nt) {
for (j in 1:nt) {
cumeffectiveness[k, j] <- sum(effectiveness[k, 1:j])
}
}
for (k in 1:nt) {
SUCRA[k] <- sum(cumeffectiveness[k, 1:(nt - 1)])/(nt -
1)
}
for (i in 1:nt) {
for (j in 1:nt) {
beta[i, j] <- b[j] - b[i]
}
}
b[ref] <- 0
for (k in 1:(ref - 1)) {
b[k] ~ dnorm(B, 1/pow(tau_b,2))
}
for (k in (ref + 1):nt) {
b[k] ~ dnorm(B, 1/pow(tau_b,2))
}
B ~ dnorm(0, 1e-04)
tau_b ~ dunif(0, 100)
}
library(devtools)
install_github("esm-ispm-unibe-ch/NMAJags")
library(NMAJags)
library(R2jags)
pain <- read.csv("C:/Users/vc18e501/Desktop/pain.csv")
data <- make.jagsNMA.data(id, n=n, y=mean, sd=sd, t=t, data=pain, reference = "Placebo")
data$variab <- var
nma <- jags(data = data, inits = NULL,
parameters.to.save = ifelse(length(data$variab)>10, c("SMD", "SMD.ref", "B", "tau"), c("SMD", "SMD.ref", "b", "tau")), n.chains = 2, n.iter = 10000,
n.burnin = 2000, DIC=F, n.thin=2,
model.file = modelNMRContinuous_bExch)
nma <- jags(data = data, inits = NULL,
parameters.to.save = c("SMD", "SMD.ref", "B", "tau"), n.chains = 2, n.iter = 10000,
n.burnin = 2000, DIC=F, n.thin=2,
model.file = modelNMRContinuous_bExch)
nma <- jags(data = data, inits = NULL,
parameters.to.save = c("SMD", "SMD.ref", "tau"), n.chains = 2, n.iter = 10000,
n.burnin = 2000, DIC=F, n.thin=2,
model.file = modelNMAContinuous)
out.jagsNMA.results(nma, parameter = "SMD", treatnames = sort(unique(pain$treatment_name)))$leaguetable
round(out.jagsNMA.results(nma, parameter = "SMD", treatnames = sort(unique(pain$treatment_name)))$leaguetable, digits = 2)
View(out.jagsNMA.results(nma, parameter = "SMD", treatnames = sort(unique(pain$treatment_name)))$leaguetable %>%
as.data.frame(, optional = T)) %>%
round(digits = 2)
out.jagsNMA.results(nma, parameter = "SMD", treatnames = sort(unique(pain$treatment_name)))$leaguetable %>%
as.data.frame(, optional = T) %>%
round(digits = 2)
out.jagsNMA.results(nma, parameter = "SMD", treatnames = sort(unique(pain$treatment_name)))$leaguetable %>%
as.numeric() %>%
round(digits = 2)
out.jagsNMA.results(nma, parameter = "SMD", treatnames = sort(unique(pain$treatment_name)))$leaguetable %>%
as.numeric()
as.numeric(out.jagsNMA.results(nma, parameter = "SMD", treatnames = sort(unique(pain$treatment_name)))$leaguetable)
as.matrix(out.jagsNMA.results(nma, parameter = "SMD", treatnames = sort(unique(pain$treatment_name)))$leaguetable)
class(out.jagsNMA.results(nma, parameter = "SMD", treatnames = sort(unique(pain$treatment_name)))$leaguetable)
as.numeric(out.jagsNMA.results(nma, parameter = "SMD", treatnames = sort(unique(pain$treatment_name)))$leaguetable)
pain <- read.csv("C:/Users/vc18e501/Desktop/pain.csv")
data <- make.jagsNMA.data(id, n=n, y=mean, sd=sd, t=t, data=pain, reference = "Placebo")
data$variab <- var
nma <- jags(data = data, inits = NULL,
parameters.to.save = c("SMD", "SMD.ref", "tau"), n.chains = 2, n.iter = 10000,
n.burnin = 2000, DIC=F, n.thin=2,
model.file = modelNMAContinuous)
library(devtools)
install_github("esm-ispm-unibe-ch/NMAJags")
library(NMAJags)
library(R2jags)
pain <- read.csv("C:/Users/vc18e501/Desktop/pain.csv")
data <- make.jagsNMA.data(id, n=n, y=mean, sd=sd, t=t, data=pain, reference = "Placebo")
data$variab <- var
nma <- jags(data = data, inits = NULL,
parameters.to.save = c("SMD", "SMD.ref", "tau"), n.chains = 2, n.iter = 10000,
n.burnin = 2000, DIC=F, n.thin=2,
model.file = modelNMAContinuous)
out.jagsNMA.results
nma$BUGSoutput$summary
View(out.jagsNMA.results)
out.jagsNMA.results(nma, parameter = "SMD", treatnames = sort(unique(pain$treatment_name)), rounding = 2)$leaguetable
out.jagsNMA.results.median <- function (JAGSobject, parameter = parameter, forestplot = F,
treatnames = NA, rounding = 2)
{
resultstable = JAGSobject$BUGSoutput$summary
allvariablenames = rownames(resultstable)
rowsmatching = substr(allvariablenames, 1, nchar(parameter))
rowstokeep = startsWith(rowsmatching, parameter)
resultstabletokeep = resultstable[rowstokeep, c(5, 3, 7,
2)]
rowstokeep2 = startsWith(dimnames(resultstabletokeep)[[1]],
paste(parameter, "[", sep = ""))
resultstabletokeep = resultstabletokeep[rowstokeep2, ]
library(stringr)
tosplit = unlist(strsplit(rownames(resultstabletokeep),
","))
tosplit2 <- as.numeric(str_extract(tosplit, "[0-9]+"))
nroftreatments = max(tosplit2)
location = matrix(tosplit2, ncol = 2, byrow = T)
medianmat = CImat = sdmat = matrix(NA, nrow = nroftreatments,
ncol = nroftreatments)
for (i in 1:nrow(location)) {
medianmat[location[i, 1], location[i, 2]] = resultstabletokeep[i,
1]
sdmat[location[i, 1], location[i, 2]] = resultstabletokeep[i,
4]
CImat[location[i, 1], location[i, 2]] = resultstabletokeep[i,
3]
CImat[location[i, 2], location[i, 1]] = resultstabletokeep[i,
2]
}
if (forestplot) {
library(metafor)
slab1 = rep(1:(nroftreatments - 1), (nroftreatments -
1):1)
a = t(sapply(1:nroftreatments, rep, nroftreatments))
slab2 = a[lower.tri(a, F)]
slab = paste(slab1, "vs", slab2, sep = "")
forest(x = medianmat[upper.tri(medianmat)], ci.lb = CImat[lower.tri(CImat)],
ci.ub = CImat[upper.tri(CImat)], slab = slab, xlab = "Network meta-analysis results")
}
medianmat = round(medianmat, rounding)
CImat = round(CImat, rounding)
Ttreat = dim(medianmat)[1]
toprintmat = matrix(nrow = Ttreat, ncol = Ttreat)
for (i in c(1:(Ttreat - 1))) {
for (j in c((i + 1):Ttreat)) {
toprintmat[i, j] = paste(medianmat[i, j], "(", CImat[j,
i], ",", CImat[i, j], ")", sep = "")
toprintmat[j, i] = paste(c(-medianmat[i, j]), "(",
c(-CImat[i, j]), ",", c(-CImat[j, i]), ")",
sep = "")
}
}
if (!missing(treatnames)) {
diag(medianmat) = treatnames
diag(CImat) = treatnames
diag(toprintmat) = treatnames
}
list(Medians = medianmat, CI = CImat, leaguetable = toprintmat)
}
nma$BUGSoutput$summary
out.jagsNMA.results(nma, parameter = "SMD", treatnames = sort(unique(pain$treatment_name)), rounding = 2)$leaguetable
out.jagsNMA.results.median(nma, parameter = "SMD", treatnames = sort(unique(pain$treatment_name)))
out.jagsNMA.results(nma, parameter = "SMD", treatnames = sort(unique(pain$treatment_name)), rounding = 2)$leaguetable
out.jagsNMA.results.median(nma, parameter = "SMD", treatnames = sort(unique(pain$treatment_name)))$leaguetable
rm(out.jagsNMA.results.median)
shiny::runApp('O:/PhD/PhD project/Publication bias/Framework reporting bias/rob-men Shiny/rob-men')
library(shiny)
library(dplyr)
library(data.table)
library(DT)
library(netmeta)
library(BUGSnet)
library(bslib)  # used to override default  bootstrap version (4 instead of 3)
require(tidyverse)
source("util.R")
source("netcontrib.R")
source("nmafunnel.R")
source("modelNMRContinuous_bExch.R")
source("out.jagsNMA.median.R")
library(devtools)
install_github("esm-ispm-unibe-ch/NMAJags")
library(NMAJags)
library(R2jags)
update.jags
runApp('O:/PhD/PhD project/Publication bias/Framework reporting bias/rob-men Shiny/rob-men')
nma.run
runApp('O:/PhD/PhD project/Publication bias/Framework reporting bias/rob-men Shiny/rob-men')
shiny::runApp('O:/PhD/PhD project/Publication bias/Framework reporting bias/rob-men Shiny/rob-men')
runApp('O:/PhD/PhD project/Publication bias/Framework reporting bias/rob-men Shiny/rob-men')
shiny::runApp('O:/PhD/PhD project/Publication bias/Framework reporting bias/rob-men Shiny/rob-men')
shiny::runApp('O:/PhD/PhD project/Publication bias/Framework reporting bias/rob-men Shiny/rob-men')
runApp('O:/PhD/PhD project/Publication bias/Framework reporting bias/rob-men Shiny/rob-men')
runApp()
runApp('O:/PhD/PhD project/Publication bias/Framework reporting bias/rob-men Shiny/rob-men')
runApp('O:/PhD/PhD project/Publication bias/Framework reporting bias/rob-men Shiny/rob-men')
library(devtools)
install_github("esm-ispm-unibe-ch/NMAJags")
library(NMAJags)
library(R2jags)
library(devtools)
install_github("esm-ispm-unibe-ch/NMAJags")
library(NMAJags)
library(R2jags)
library(netmeta)
shiny::runApp('O:/PhD/PhD project/Publication bias/Framework reporting bias/rob-men Shiny/rob-men')
shiny::runApp()
runApp()
runApp()
runApp()
knitr::opts_chunk$set(echo = TRUE)
library(devtools)
install_github("esm-ispm-unibe-ch/NMAJags")
library(NMAJags)
library(R2jags)
library(netmeta)
library(meta)
library(metafor)
library(readxl)
library(writexl)
library(BUGSnet)
library(dplyr)
shiny::runApp()
shiny::runApp()
runApp()
if (!meta:::is_installed_package("igraph", stop = FALSE)) {
warning(paste("Package 'igraph' missing.",
"\n  ",
"Please use the following R command for installation:",
"\n  ",
"install.packages(\"igraph\")",
sep = ""),
call. = FALSE)
return(invisible(NULL))
}
runApp()
runApp()
runApp()
order[1:nt]<- nt + 1 - rank(d[1:nt])
runApp()
runApp()
runApp()
